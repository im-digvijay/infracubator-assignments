name: docker-build

on:
  workflow_dispatch:
    inputs:
      image:
        type: choice
        required: true
        description: 'Image to build and push to docker hub'
        options:
          - custom-alpine
          - custom-maven
          - custom-npm
          - custom-capabilities
      push-latest:
        type: boolean
        description: 'Push latest image to registry'
        required: true
        default: true

#  push:
#    branches:
#      - "master"

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Compute git short SHA
        id: git_sha
        run: echo "short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Setup docker build vars
        id: build_vars
        run: |
          case ${{ inputs.image }} in
            custom-alpine)
              echo "context=./assignment_3/question_1" >> $GITHUB_OUTPUT
            ;;
            custom-maven)
              echo "context=./assignment_3/question_2/maven" >> $GITHUB_OUTPUT
            ;;
            custom-npm)
              echo "context=./assignment_3/question_2/node" >> $GITHUB_OUTPUT
            ;;
            custom-capabilities)
              echo "context=./assignment_3/question_3" >> $GITHUB_OUTPUT
            ;;
          esac
          if [[ ${{ inputs.push-latest }} ]]
          then
            tag=latest
          else
            tag=${{ steps.git_sha.outputs.short }}
          fi
          echo "image_with_tag=${{ vars.DOCKERHUB_USERNAME }}/${{ inputs.image }}:$tag"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build an image
        id: build
        run: docker build -t ${{ steps.build_vars.outputs.image_with_tag }} ${{ steps.build_vars.outputs.context }}

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: ${{ steps.build_vars.outputs.context }}
          push: true
          tags: ${{ steps.build_vars.outputs.image_with_tag }}

      - name: Create Notice
        run: echo ::notice title=Image::${{ steps.build_vars.outputs.image_with_tag }}
